import * as fs from 'fs';
import * as path from 'path';

// Configuraci√≥n
const IMAGE_DIRS = [
  'uploads/products',
  'uploads/certifications',
  'uploads/profiles'
];

// Im√°genes de muestra para cada categor√≠a
const SAMPLE_IMAGES = [
  { filename: 'fruits.jpg', url: 'https://images.unsplash.com/photo-1619566636858-adf3ef46400b?q=80&w=600' },
  { filename: 'vegetables.jpg', url: 'https://images.unsplash.com/photo-1566385101042-1a0aa0c1268c?q=80&w=600' },
  { filename: 'grains.jpg', url: 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?q=80&w=600' },
  { filename: 'coffee.jpg', url: 'https://images.unsplash.com/photo-1447933601403-0c6688de566e?q=80&w=600' },
  { filename: 'dairy.jpg', url: 'https://images.unsplash.com/photo-1628689469838-524a4a973b8e?q=80&w=600' },
  { filename: 'herbs.jpg', url: 'https://images.unsplash.com/photo-1600508696361-3165634e938b?q=80&w=600' },
  { filename: 'honey.jpg', url: 'https://images.unsplash.com/photo-1587049352851-8d4e89133924?q=80&w=600' },
  { filename: 'default.jpg', url: 'https://images.unsplash.com/photo-1542838132-92c53300491e?q=80&w=600' },
  { filename: 'additional.jpg', url: 'https://images.unsplash.com/photo-1523049673857-eb18f1d7b578?q=80&w=600' }
];

/**
 * Crea los directorios necesarios si no existen
 */
function createDirectories() {
  console.log('üóÇÔ∏è Creando directorios necesarios...');
  
  IMAGE_DIRS.forEach(dir => {
    const dirPath = path.resolve(process.cwd(), dir);
    
    if (!fs.existsSync(dirPath)) {
      try {
        fs.mkdirSync(dirPath, { recursive: true });
        console.log(`‚úÖ Directorio creado: ${dirPath}`);
      } catch (error) {
        console.error(`‚ùå Error al crear directorio ${dirPath}:`, error);
      }
    } else {
      console.log(`‚ÑπÔ∏è El directorio ya existe: ${dirPath}`);
    }
  });
}

/**
 * Descarga una imagen desde una URL
 * @param url URL de la imagen
 * @param outputPath Ruta donde guardar la imagen
 */
async function downloadImage(url: string, outputPath: string): Promise<void> {
  try {
    // Verificar si la imagen ya existe
    if (fs.existsSync(outputPath)) {
      console.log(`‚ÑπÔ∏è La imagen ya existe: ${outputPath}`);
      return;
    }
    
    console.log(`üì• Descargando imagen desde ${url}...`);
    
    // Descargar la imagen usando fetch
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(`Error al descargar imagen: ${response.statusText}`);
    }
    
    const buffer = await response.arrayBuffer();
    fs.writeFileSync(outputPath, Buffer.from(buffer));
    
    console.log(`‚úÖ Imagen guardada en: ${outputPath}`);
  } catch (error) {
    console.error(`‚ùå Error al descargar imagen ${url}:`, error);
    
    // Si la descarga falla, crear una imagen de marcador de posici√≥n simple
    try {
      createPlaceholderImage(outputPath);
    } catch (placeholderError) {
      console.error(`‚ùå No se pudo crear imagen de marcador de posici√≥n:`, placeholderError);
    }
  }
}

/**
 * Crea una imagen de marcador de posici√≥n simple si la descarga falla
 * @param outputPath Ruta donde guardar la imagen
 */
function createPlaceholderImage(outputPath: string): void {
  const placeholderContent = `
    <svg width="600" height="400" xmlns="http://www.w3.org/2000/svg">
      <rect width="100%" height="100%" fill="#f0f0f0"/>
      <text x="50%" y="50%" font-family="Arial" font-size="24" text-anchor="middle" fill="#666">
        Imagen de muestra
      </text>
    </svg>
  `;
  
  fs.writeFileSync(outputPath, placeholderContent);
  console.log(`‚ÑπÔ∏è Imagen de marcador de posici√≥n creada en: ${outputPath}`);
}

/**
 * Funci√≥n principal
 */
async function main() {
  try {
    console.log('üå± Iniciando configuraci√≥n de im√°genes para productos...');
    
    // Crear directorios necesarios
    createDirectories();
    
    // Descargar im√°genes de muestra
    console.log('üñºÔ∏è Descargando im√°genes de muestra...');
    
    const productImagesDir = path.resolve(process.cwd(), 'uploads/products');
    
    for (const image of SAMPLE_IMAGES) {
      const outputPath = path.join(productImagesDir, image.filename);
      await downloadImage(image.url, outputPath);
    }
    
    console.log('üéâ Configuraci√≥n de im√°genes completada');
  } catch (error) {
    console.error('‚ùå Error en la configuraci√≥n de im√°genes:', error);
  }
}

// Ejecutar la funci√≥n principal
main()
  .then(() => console.log('‚úÖ Script de configuraci√≥n de im√°genes completado'))
  .catch(e => console.error('üí• Error en script de configuraci√≥n de im√°genes:', e)); 